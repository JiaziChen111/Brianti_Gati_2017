function [f fx fy fxp fyp eta R set dgam_dtheta deta_dtheta dR_dtheta xlag ylag] = model_prog(param, set)

param = param_trans(param);
%Assign parameter values to named variables.
gam = param(1);

%Assign set values to named variables.
bet = set(1);
a = set(2);
b = set(3);
biggami = set(4);
biggamc = set(5);
di = set(6);
dc = set(7);
chi = set(8);
siggami = set(9);
sige = set(10);
adiff = set(11);

%BEGIN_EXTRACT_HERE

%Use closed form expressions for the ss values.

%%%%%%%%%%%%%%%% L copied the ss of the spillover_news file starting here.

%Step 0 - always run it!
p        = (biggamc)/(biggami); 
expgc    = biggamc^((1-b-gam)/(1-a-b-gam))*biggami^((b+gam)/(1-a-b-gam));
expgi    = biggamc^(a/(1-a-b-gam))*biggami^((1-a)/(1-a-b-gam));
gc       = expgc - (1-dc); 
gi       = expgi - (1-di);
rc       = 1/bet * expgc - (1-dc); 
ri       = (1/bet* expgi -(1-di))*p; 

%Step 1
kc_bar          = @(wx) wx/rc*a/(1-a-b); %kc = kc1 = kc2 = Kc/h = Kc1/h1 = Kc2/h2
ki_bar          = @(wx) wx/ri*b/(1-a-b); %ki = ki1 = ki2 = Ki/h = Ki1/h1 = Ki2/h2
ki              = @(wx) (rc/(a*biggamc)*kc_bar(wx)^(1-a)*ki_bar(wx)^(-b))^(1/gam);
Ki_check        = @(wx) (ri/(b*biggamc)*kc_bar(wx)^(-a)*ki_bar(wx)^(1-b))^(1/gam); %check 
Ki_check2       = @(wx) (wx/((1-a-b)*biggamc)*kc_bar(wx)^(-a)*ki_bar(wx)^(-b))^(1/gam); %check
check           = ((ki(15) - Ki_check(15)) + (ki(15) - Ki_check2(15)))^2;
if check > 10^(-16)
      error('Ki is wrong')
end
Ki_Kc = b/a*rc/ri; %Ki_Kc = Ki/Kc = Ki1/Kc1 = Ki2/Kc2 = ki/kc

%Step 2
h2 = @(wx) gi/biggami*ki(wx)^(1-gam)*kc_bar(wx)^(-a)*ki_bar(wx)^(-b);
ki2 = @(wx) ki_bar(wx)*h2(wx);
kc2 = @(wx) kc_bar(wx)*h2(wx);

%Step 3
% Case of V(h) = -chi*H
h1 = @(wx) (1/chi*wx/ki(wx) + gc/Ki_Kc)/biggamc*ki(wx)^(1-gam)*kc_bar(wx)^(-a)*ki_bar(wx)^(-b);
h1_check = @(wx) (wx/chi + gc/Ki_Kc*ki(wx))/biggamc*ki(wx)^(-gam)*kc_bar(wx)^(-a)*ki_bar(wx)^(-b);
% % Case of V(h) = chi*log(1-h)
% h1 = @(wx) (wx*h2(wx)/chi - wx/chi + gc/Ki_Kc*ki(wx)) / (biggamc*ki(wx)^(gam)*kc_bar(wx)^(a)*ki_bar(wx)^(b) -wx/chi);
% h1_check = @(wx) (biggamc*ki(wx)^(gam)*kc_bar(wx)^(a)*ki_bar(wx)^(b) -wx/chi)^(-1) ...
%     *(gc/Ki_Kc*ki(wx) + biggamc*ki(wx)^(gam)*kc_bar(wx)^(a)*ki_bar(wx)^(b)*h2(wx) -wx/chi) - h2(wx);
% Case of V(h) = chi/2*H^2
h1 = @(wx) (gc/Ki_Kc*ki(wx) + biggamc*ki(wx)^(gam)*kc_bar(wx)^(a)*ki_bar(wx)^(b)*h2(wx)  ...
    + sqrt(  (gc/Ki_Kc*ki(wx) + biggamc*ki(wx)^(gam)*kc_bar(wx)^(a)*ki_bar(wx)^(b)*h2(wx))^2  ...
    + 4*biggamc*ki(wx)^(gam)*kc_bar(wx)^(a)*ki_bar(wx)^(b) *wx/chi)) ...
    / (2*biggamc*ki(wx)^(gam)*kc_bar(wx)^(a)*ki_bar(wx)^(b)) -h2(wx);

% check_h = (h1(150) - h1_check(150))^2;
% if check_h > 10^(-16)
%       error('h1 is wrong')
% end
ki1 = @(wx) ki_bar(wx)*h1(wx);
kc1 = @(wx) kc_bar(wx)*h1(wx);

%Step 4
h = @(wx) h1(wx) + h2(wx);
kc = @(wx) kc1(wx) + kc2(wx);
yc = @(wx) biggamc*ki(wx)^(gam)*h1(wx)^(1-a-b)*kc1(wx)^(a)*ki1(wx)^(b);
yi = @(wx) biggami*ki(wx)^(gam)*h2(wx)^(1-a-b)*kc2(wx)^(a)*ki2(wx)^(b);
ii = @(wx) gi*ki(wx);
ic = @(wx) gc*kc(wx);
c = @(wx) yc(wx) - ic(wx);

%Step 5 - Minimization
%Objective: w = @(wx) chi*c(wx)
options = optimoptions('fmincon'); 
% Set OptimalityTolerance to 1e-15
%options = optimoptions(options, 'OptimalityTolerance', 1e-18); 
% Set the Display option to 'iter' and StepTolerance to 1e-4
options.Display = 'none';
%options.StepTolerance = 1e-18;
% objw = @(wx) (wx/chi - c(wx))^2; % case of linear V(H)
objw = @(wx) (chi*h(wx) - wx/c(wx))^2; % case of  V(H) quadratic
wx0 = 100;
wstar = fmincon(objw,wx0,[],[],[],[],[],[],[],options);
wstar
% A check on how h(w) behaves
wgrid = linspace(0.5,0.9,100);
for j=1:length(wgrid)
w_figure(j) = objw(wgrid(j));
h_figure(j) = h(wgrid(j));
c_figure(j) = c(wgrid(j));
ic_figure(j) = ic(wgrid(j));
yc_figure(j) = yc(wgrid(j));
ki_figure(j) = ki(wgrid(j));
kc_figure(j) = kc(wgrid(j));
ki1_figure(j) = ki1(wgrid(j));
kc1_figure(j) = kc1(wgrid(j));
ki2_figure(j) = ki2(wgrid(j));
kc2_figure(j) = kc2(wgrid(j));
h1_figure(j) = h1(wgrid(j));
end

% plot(wgrid, h_figure); hold on
 %plot(wgrid, w_figure)
 %plot(wgrid, c_figure)
 %legend('objective')
% Try to use also fzero
% objw2 = @(wx)  wx - chi*c(wx);
% wstar2 = fzero(objw2,wx0);
res_obj_wstar = objw(wstar)

%Step 5
kc = kc(wstar); %small kc back to be original Kc - drop previous notation
ki = ki(wstar); %small ki back to be original Ki - drop previous notation
yc = yc(wstar);
yi = yi(wstar);
c = c(wstar);
ic = ic(wstar);
it = ii(wstar);
w = wstar;
h = h(wstar);
h1 = h1(wstar);
h2 = h2(wstar);
kc1 = kc1(wstar); %small kc1 back to be original Kc1 - drop previous notation
kc2 = kc2(wstar); %small kc2 back to be original Kc2 - drop previous notation
ki1 = ki1(wstar); %small ki1 back to be original Ki1 - drop previous notation
ki2 = ki2(wstar); %small ki2 back to be original Ki2 - drop previous notation

%%%%%%%%%%%%%%%% L copied the ss of the spillover_news file up to here.


%Put the ss values in a vector consistent with X and Y vectors in model.m
Xss  = [kc ki biggamc biggami ...
    c biggamc biggami yc yi h p kc2 ki2 ki kc 0 0 0 0 0 0 0 0 0 1 ...
    biggami biggami]; 
Yss  = [yc yi c ic it w rc ri h h1 h2 kc1 kc2 ki1 ki2 p expgc expgi ...
    expgc expgi expgc expgi 1 p expgc expgi];


%END_EXTRACT_HERE
%Compute Steady State
KC= Xss(1);
KI= Xss(2);
BIGGAMC= Xss(3);
BIGGAMI= Xss(4);
CL= Xss(5);
BIGGAMCL= Xss(6);
BIGGAMIL= Xss(7);
YCL= Xss(8);
YIL= Xss(9);
HL= Xss(10);
PL= Xss(11);
KC2L= Xss(12);
KI2L= Xss(13);
KIL= Xss(14);
KCL= Xss(15);
V0= Xss(16);
V1= Xss(17);
V2= Xss(18);
V3= Xss(19);
V4= Xss(20);
V5= Xss(21);
V6= Xss(22);
V7= Xss(23);
V8= Xss(24);
N= Xss(25);
BIGGAMITT= Xss(26);
S= Xss(27);
YC= Yss(1);
YI= Yss(2);
C= Yss(3);
IC= Yss(4);
IT= Yss(5);
W= Yss(6);
RC= Yss(7);
RI= Yss(8);
H= Yss(9);
H1= Yss(10);
H2= Yss(11);
KC1= Yss(12);
KC2= Yss(13);
KI1= Yss(14);
KI2= Yss(15);
P= Yss(16);
EXPGC= Yss(17);
EXPGI= Yss(18);
GAMC= Yss(19);
GAMKI= Yss(20);
GAMYC= Yss(21);
GAMYI= Yss(22);
GAMH= Yss(23);
GAMP= Yss(24);
GAMKC2= Yss(25);
GAMKI2= Yss(26);
KC_p= Xss(1);
KI_p= Xss(2);
BIGGAMC_p= Xss(3);
BIGGAMI_p= Xss(4);
CL_p= Xss(5);
BIGGAMCL_p= Xss(6);
BIGGAMIL_p= Xss(7);
YCL_p= Xss(8);
YIL_p= Xss(9);
HL_p= Xss(10);
PL_p= Xss(11);
KC2L_p= Xss(12);
KI2L_p= Xss(13);
KIL_p= Xss(14);
KCL_p= Xss(15);
V0_p= Xss(16);
V1_p= Xss(17);
V2_p= Xss(18);
V3_p= Xss(19);
V4_p= Xss(20);
V5_p= Xss(21);
V6_p= Xss(22);
V7_p= Xss(23);
V8_p= Xss(24);
N_p= Xss(25);
BIGGAMITT_p= Xss(26);
S_p= Xss(27);
YC_p= Yss(1);
YI_p= Yss(2);
C_p= Yss(3);
IC_p= Yss(4);
IT_p= Yss(5);
W_p= Yss(6);
RC_p= Yss(7);
RI_p= Yss(8);
H_p= Yss(9);
H1_p= Yss(10);
H2_p= Yss(11);
KC1_p= Yss(12);
KC2_p= Yss(13);
KI1_p= Yss(14);
KI2_p= Yss(15);
P_p= Yss(16);
EXPGC_p= Yss(17);
EXPGI_p= Yss(18);
GAMC_p= Yss(19);
GAMKI_p= Yss(20);
GAMYC_p= Yss(21);
GAMYI_p= Yss(22);
GAMH_p= Yss(23);
GAMP_p= Yss(24);
GAMKC2_p= Yss(25);
GAMKI2_p= Yss(26);

%Evaluate F.
f = [[log(BIGGAMC)*log(H1)^(1 - b - a)*log(KC1)^a*log(KI)^gam*log(KI1)^b*log(N) - log(YC), log(BIGGAMI)*log(H2)^(1 - b - a)*log(KC2)^a*log(KI)^gam*log(KI2)^b*log(N) - log(YI), log(KC1) - log(KC) + log(KC2), log(KI1) - log(KI) + log(KI2), log(H1) - log(H) + log(H2), log(BIGGAMC)^((b + gam - 1)/(a + b + gam - 1))/log(BIGGAMI)^((b + gam)/(a + b + gam - 1)) - log(EXPGC), log(BIGGAMI)^((a - 1)/(a + b + gam - 1))/log(BIGGAMC)^(a/(a + b + gam - 1)) - log(EXPGI), log(IC) - log(EXPGC)*log(KC_p) - log(KC)*(dc - 1), log(IT) - log(EXPGI)*log(KI_p) - log(KI)*(di - 1), log(C) + log(IC) - log(YC), log(IT) - log(YI), log(W)/(chi*log(H)) - log(C), (bet*log(C)*(log(RC_p) - dc + 1))/(log(C_p)*log(EXPGC)) - 1, (bet*log(C)*(log(RI_p)/log(P_p) - di + 1))/(log(C_p)*log(EXPGI)) - 1, - log(W) - (log(BIGGAMC)*log(KC1)^a*log(KI)^gam*log(KI1)^b*(a + b - 1))/log(H1)^(a + b), a*log(BIGGAMC)*log(H1)^(1 - b - a)*log(KC1)^(a - 1)*log(KI)^gam*log(KI1)^b - log(RC), b*log(BIGGAMC)*log(H1)^(1 - b - a)*log(KC1)^a*log(KI)^gam*log(KI1)^(b - 1) - log(RI), - log(W) - (log(BIGGAMITT)*log(KC2)^a*log(KI)^gam*log(KI2)^b*log(P)*(a + b - 1))/log(H2)^(a + b), a*log(BIGGAMITT)*log(H2)^(1 - b - a)*log(KC2)^(a - 1)*log(KI)^gam*log(KI2)^b*log(P) - log(RC), b*log(BIGGAMITT)*log(H2)^(1 - b - a)*log(KC2)^a*log(KI)^gam*log(KI2)^(b - 1)*log(P) - log(RI), log(log(BIGGAMC_p)/biggamc) - (4*log(log(BIGGAMC)/biggamc))/5, log(log(BIGGAMI_p)/biggami) - (4*log(log(BIGGAMI)/biggami))/5, log(log(N_p)) - (4*log(log(N)))/5 - log(V0), log(BIGGAMCL_p) - log(BIGGAMC), log(BIGGAMIL_p) - log(BIGGAMI), log(CL_p) - log(C), log(KIL_p) - log(KI), log(KCL_p) - log(KC), log(YCL_p) - log(YC), log(YIL_p) - log(YI), log(HL_p) - log(H), log(PL_p) - log(P), log(KC2L_p) - log(KC2), log(KI2L_p) - log(KI2), log(GAMC) - (log(BIGGAMCL)^((b + gam - 1)/(a + b + gam - 1))*log(C))/(log(BIGGAMIL)^((b + gam)/(a + b + gam - 1))*log(CL)), log(GAMKI) - (log(BIGGAMIL)^((a - 1)/(a + b + gam - 1))*log(KI))/(log(BIGGAMCL)^(a/(a + b + gam - 1))*log(KIL)), log(GAMYC) - (log(BIGGAMCL)^((b + gam - 1)/(a + b + gam - 1))*log(YC))/(log(BIGGAMIL)^((b + gam)/(a + b + gam - 1))*log(YCL)), log(GAMYI) - (log(BIGGAMIL)^((a - 1)/(a + b + gam - 1))*log(YI))/(log(BIGGAMCL)^(a/(a + b + gam - 1))*log(YIL)), log(GAMH) - log(H)/log(HL), log(GAMP) - (log(BIGGAMCL)*log(P))/(log(BIGGAMIL)*log(PL)), log(GAMKC2) - (log(BIGGAMCL)^((b + gam - 1)/(a + b + gam - 1))*log(KC2))/(log(BIGGAMIL)^((b + gam)/(a + b + gam - 1))*log(KC2L)), log(GAMKI2) - (log(BIGGAMIL)^((a - 1)/(a + b + gam - 1))*log(KI2))/(log(BIGGAMCL)^(a/(a + b + gam - 1))*log(KI2L)), log(V8_p), log(V0_p) - log(V1), log(V1_p) - log(V2), log(V2_p) - log(V3), log(V3_p) - log(V4), log(V4_p) - log(V5), log(V5_p) - log(V6), log(V6_p) - log(V7), log(V7_p) - log(V8), log(BIGGAMITT_p) - (sige*log(BIGGAMITT))/(sige + siggami) - (siggami*log(S_p))/(sige + siggami), log(S_p) - log(BIGGAMI_p)]];
%Evaluate derivative expressions.
fx = [[0, BIGGAMC*H1^(1 - b - a)*KC1^a*KI^(gam - 1)*KI1^b*N*gam, H1^(1 - b - a)*KC1^a*KI^gam*KI1^b*N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIGGAMC*H1^(1 - b - a)*KC1^a*KI^gam*KI1^b, 0, 0]; [0, BIGGAMI*H2^(1 - b - a)*KC2^a*KI^(gam - 1)*KI2^b*N*gam, 0, H2^(1 - b - a)*KC2^a*KI^gam*KI2^b*N, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, BIGGAMI*H2^(1 - b - a)*KC2^a*KI^gam*KI2^b, 0, 0]; [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, (BIGGAMC^((b + gam - 1)/(a + b + gam - 1) - 1)*(b + gam - 1))/(BIGGAMI^((b + gam)/(a + b + gam - 1))*(a + b + gam - 1)), -(BIGGAMC^((b + gam - 1)/(a + b + gam - 1))*(b + gam))/(BIGGAMI^((b + gam)/(a + b + gam - 1) + 1)*(a + b + gam - 1)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, -(BIGGAMI^((a - 1)/(a + b + gam - 1))*a)/(BIGGAMC^(a/(a + b + gam - 1) + 1)*(a + b + gam - 1)), (BIGGAMI^((a - 1)/(a + b + gam - 1) - 1)*(a - 1))/(BIGGAMC^(a/(a + b + gam - 1))*(a + b + gam - 1)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [1 - dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 1 - di, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -(BIGGAMC*KC1^a*KI^(gam - 1)*KI1^b*gam*(a + b - 1))/H1^(a + b), -(KC1^a*KI^gam*KI1^b*(a + b - 1))/H1^(a + b), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, BIGGAMC*H1^(1 - b - a)*KC1^(a - 1)*KI^(gam - 1)*KI1^b*a*gam, H1^(1 - b - a)*KC1^(a - 1)*KI^gam*KI1^b*a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, BIGGAMC*H1^(1 - b - a)*KC1^a*KI^(gam - 1)*KI1^(b - 1)*b*gam, H1^(1 - b - a)*KC1^a*KI^gam*KI1^(b - 1)*b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -(BIGGAMITT*KC2^a*KI^(gam - 1)*KI2^b*P*gam*(a + b - 1))/H2^(a + b), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(KC2^a*KI^gam*KI2^b*P*(a + b - 1))/H2^(a + b), 0]; [0, BIGGAMITT*H2^(1 - b - a)*KC2^(a - 1)*KI^(gam - 1)*KI2^b*P*a*gam, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, H2^(1 - b - a)*KC2^(a - 1)*KI^gam*KI2^b*P*a, 0]; [0, BIGGAMITT*H2^(1 - b - a)*KC2^a*KI^(gam - 1)*KI2^(b - 1)*P*b*gam, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, H2^(1 - b - a)*KC2^a*KI^gam*KI2^(b - 1)*P*b, 0]; [0, 0, -4/(5*BIGGAMC), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, -4/(5*BIGGAMI), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -4/(5*N), 0, 0]; [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, (BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))*C)/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*CL^2), -(BIGGAMCL^((b + gam - 1)/(a + b + gam - 1) - 1)*C*(b + gam - 1))/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*CL*(a + b + gam - 1)), (BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))*C*(b + gam))/(BIGGAMIL^((b + gam)/(a + b + gam - 1) + 1)*CL*(a + b + gam - 1)), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -BIGGAMIL^((a - 1)/(a + b + gam - 1))/(BIGGAMCL^(a/(a + b + gam - 1))*KIL), 0, 0, 0, (BIGGAMIL^((a - 1)/(a + b + gam - 1))*KI*a)/(BIGGAMCL^(a/(a + b + gam - 1) + 1)*KIL*(a + b + gam - 1)), -(BIGGAMIL^((a - 1)/(a + b + gam - 1) - 1)*KI*(a - 1))/(BIGGAMCL^(a/(a + b + gam - 1))*KIL*(a + b + gam - 1)), 0, 0, 0, 0, 0, 0, (BIGGAMIL^((a - 1)/(a + b + gam - 1))*KI)/(BIGGAMCL^(a/(a + b + gam - 1))*KIL^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, -(BIGGAMCL^((b + gam - 1)/(a + b + gam - 1) - 1)*YC*(b + gam - 1))/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*YCL*(a + b + gam - 1)), (BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))*YC*(b + gam))/(BIGGAMIL^((b + gam)/(a + b + gam - 1) + 1)*YCL*(a + b + gam - 1)), (BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))*YC)/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*YCL^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, (BIGGAMIL^((a - 1)/(a + b + gam - 1))*YI*a)/(BIGGAMCL^(a/(a + b + gam - 1) + 1)*YIL*(a + b + gam - 1)), -(BIGGAMIL^((a - 1)/(a + b + gam - 1) - 1)*YI*(a - 1))/(BIGGAMCL^(a/(a + b + gam - 1))*YIL*(a + b + gam - 1)), 0, (BIGGAMIL^((a - 1)/(a + b + gam - 1))*YI)/(BIGGAMCL^(a/(a + b + gam - 1))*YIL^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, H/HL^2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, -P/(BIGGAMIL*PL), (BIGGAMCL*P)/(BIGGAMIL^2*PL), 0, 0, 0, (BIGGAMCL*P)/(BIGGAMIL*PL^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, -(BIGGAMCL^((b + gam - 1)/(a + b + gam - 1) - 1)*KC2*(b + gam - 1))/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*KC2L*(a + b + gam - 1)), (BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))*KC2*(b + gam))/(BIGGAMIL^((b + gam)/(a + b + gam - 1) + 1)*KC2L*(a + b + gam - 1)), 0, 0, 0, 0, (BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))*KC2)/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*KC2L^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, (BIGGAMIL^((a - 1)/(a + b + gam - 1))*KI2*a)/(BIGGAMCL^(a/(a + b + gam - 1) + 1)*KI2L*(a + b + gam - 1)), -(BIGGAMIL^((a - 1)/(a + b + gam - 1) - 1)*KI2*(a - 1))/(BIGGAMCL^(a/(a + b + gam - 1))*KI2L*(a + b + gam - 1)), 0, 0, 0, 0, 0, (BIGGAMIL^((a - 1)/(a + b + gam - 1))*KI2)/(BIGGAMCL^(a/(a + b + gam - 1))*KI2L^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -sige/(sige + siggami), 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
fy = [[-1, 0, 0, 0, 0, 0, 0, 0, 0, -(BIGGAMC*KC1^a*KI^gam*KI1^b*N*(a + b - 1))/H1^(a + b), 0, BIGGAMC*H1^(1 - b - a)*KC1^(a - 1)*KI^gam*KI1^b*N*a, 0, BIGGAMC*H1^(1 - b - a)*KC1^a*KI^gam*KI1^(b - 1)*N*b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -(BIGGAMI*KC2^a*KI^gam*KI2^b*N*(a + b - 1))/H2^(a + b), 0, BIGGAMI*H2^(1 - b - a)*KC2^(a - 1)*KI^gam*KI2^b*N*a, 0, BIGGAMI*H2^(1 - b - a)*KC2^a*KI^gam*KI2^(b - 1)*N*b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, -1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -KC_p, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -KI_p, 0, 0, 0, 0, 0, 0, 0, 0]; [-1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, -1, 0, 0, 1/(H*chi), 0, 0, -W/(H^2*chi), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, (bet*(RC_p - dc + 1))/(C_p*EXPGC), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(C*bet*(RC_p - dc + 1))/(C_p*EXPGC^2), 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, (bet*(RI_p/P_p - di + 1))/(C_p*EXPGI), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -(C*bet*(RI_p/P_p - di + 1))/(C_p*EXPGI^2), 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, -1, 0, 0, 0, (BIGGAMC*KC1^a*KI^gam*KI1^b*(a + b)*(a + b - 1))/H1^(a + b + 1), 0, -(BIGGAMC*KC1^(a - 1)*KI^gam*KI1^b*a*(a + b - 1))/H1^(a + b), 0, -(BIGGAMC*KC1^a*KI^gam*KI1^(b - 1)*b*(a + b - 1))/H1^(a + b), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, -1, 0, 0, -(BIGGAMC*KC1^(a - 1)*KI^gam*KI1^b*a*(a + b - 1))/H1^(a + b), 0, BIGGAMC*H1^(1 - b - a)*KC1^(a - 2)*KI^gam*KI1^b*a*(a - 1), 0, BIGGAMC*H1^(1 - b - a)*KC1^(a - 1)*KI^gam*KI1^(b - 1)*a*b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, -1, 0, -(BIGGAMC*KC1^a*KI^gam*KI1^(b - 1)*b*(a + b - 1))/H1^(a + b), 0, BIGGAMC*H1^(1 - b - a)*KC1^(a - 1)*KI^gam*KI1^(b - 1)*a*b, 0, BIGGAMC*H1^(1 - b - a)*KC1^a*KI^gam*KI1^(b - 2)*b*(b - 1), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, (BIGGAMITT*KC2^a*KI^gam*KI2^b*P*(a + b)*(a + b - 1))/H2^(a + b + 1), 0, -(BIGGAMITT*KC2^(a - 1)*KI^gam*KI2^b*P*a*(a + b - 1))/H2^(a + b), 0, -(BIGGAMITT*KC2^a*KI^gam*KI2^(b - 1)*P*b*(a + b - 1))/H2^(a + b), -(BIGGAMITT*KC2^a*KI^gam*KI2^b*(a + b - 1))/H2^(a + b), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, -(BIGGAMITT*KC2^(a - 1)*KI^gam*KI2^b*P*a*(a + b - 1))/H2^(a + b), 0, BIGGAMITT*H2^(1 - b - a)*KC2^(a - 2)*KI^gam*KI2^b*P*a*(a - 1), 0, BIGGAMITT*H2^(1 - b - a)*KC2^(a - 1)*KI^gam*KI2^(b - 1)*P*a*b, BIGGAMITT*H2^(1 - b - a)*KC2^(a - 1)*KI^gam*KI2^b*a, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -(BIGGAMITT*KC2^a*KI^gam*KI2^(b - 1)*P*b*(a + b - 1))/H2^(a + b), 0, BIGGAMITT*H2^(1 - b - a)*KC2^(a - 1)*KI^gam*KI2^(b - 1)*P*a*b, 0, BIGGAMITT*H2^(1 - b - a)*KC2^a*KI^gam*KI2^(b - 2)*P*b*(b - 1), BIGGAMITT*H2^(1 - b - a)*KC2^a*KI^gam*KI2^(b - 1)*b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, -BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*CL), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]; [-BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*YCL), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]; [0, -BIGGAMIL^((a - 1)/(a + b + gam - 1))/(BIGGAMCL^(a/(a + b + gam - 1))*YIL), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, -1/HL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -BIGGAMCL/(BIGGAMIL*PL), 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -BIGGAMCL^((b + gam - 1)/(a + b + gam - 1))/(BIGGAMIL^((b + gam)/(a + b + gam - 1))*KC2L), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -BIGGAMIL^((a - 1)/(a + b + gam - 1))/(BIGGAMCL^(a/(a + b + gam - 1))*KI2L), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
fxp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [-EXPGC, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, -EXPGI, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 1/BIGGAMC_p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 1/BIGGAMI_p, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1/N_p, 0, 0]; [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -siggami/(sige + siggami)]; [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]];
fyp = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, -(C*bet*(RC_p - dc + 1))/(C_p^2*EXPGC), 0, 0, 0, (C*bet)/(C_p*EXPGC), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, -(C*bet*(RI_p/P_p - di + 1))/(C_p^2*EXPGI), 0, 0, 0, 0, (C*bet)/(C_p*EXPGI*P_p), 0, 0, 0, 0, 0, 0, 0, -(C*RI_p*bet)/(C_p*EXPGI*P_p^2), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];

eta = [[0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [0]; [sige]; [0]];
R = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]];
